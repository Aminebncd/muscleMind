{% extends 'base.html.twig' %}

{% block title %}Training Sessions - MuscleMind{% endblock %}

{% block body %}
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="page-header">
        <h1 class="page-title">
            <i class="fas fa-calendar-alt mr-3 text-blue-600"></i>Training Sessions
        </h1>
        <p class="page-subtitle">Manage your workout schedule and track your training progress</p>
    </div>

    <!-- Calendar Container -->
    <div class="card mb-8">
        <div class="card-header">
            <h2 class="card-title">
                <i class="fas fa-calendar mr-2 text-blue-500"></i>
                Training Calendar
            </h2>
        </div>
        <div class="card-content">
            <div id="calendar-holder" class="min-h-[600px]"></div>
        </div>
    </div>

    <!-- Batch Operations -->
    <div class="card">
        <div class="card-header bg-red-50 dark:bg-red-900/20 border-b border-red-200 dark:border-red-800">
            <h2 class="card-title text-red-800 dark:text-red-200">
                <i class="fas fa-trash-alt mr-2"></i>
                Batch Session Management
            </h2>
            <p class="text-sm text-red-600 dark:text-red-300 mt-1">
                Use this section to manage multiple sessions at once
            </p>
        </div>
        <div class="card-content">
            <div class="alert alert-warning mb-6">
                <i class="fas fa-exclamation-triangle mr-2"></i>
                <span>Deleting sessions will permanently remove all associated data. This action cannot be
                    undone.</span>
            </div>

            {{ form_start(form, {'attr': {'class': 'space-y-6'}}) }}

            <div class="flex flex-col sm:flex-row gap-4">
                {{ form_widget(form.submit, {'attr': {'class': 'btn btn-danger'}}) }}
                <button type="button" class="btn btn-secondary" onclick="selectAllSessions()">
                    <i class="fas fa-check-square mr-2"></i>Select All
                </button>
                <button type="button" class="btn btn-secondary" onclick="deselectAllSessions()">
                    <i class="fas fa-square mr-2"></i>Deselect All
                </button>
            </div>

            {{ form_end(form) }}
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var calendarEl = document.getElementById('calendar-holder');

        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            height: 'auto',
            headerToolbar: {
                start: 'prev,next today',
                center: 'title',
                end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'
            },
            themeSystem: 'standard',
            editable: true,
            timeZone: 'UTC',
            weekNumbers: true,
            dayMaxEvents: true,
            events: function (fetchInfo, successCallback, failureCallback) {
                console.log('Fetching events...');
                fetch('/calendar')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Events data:', data);
                        successCallback(data);
                    })
                    .catch(error => {
                        console.error('Error fetching events:', error);
                        failureCallback(error);
                    });
            },
            eventClick: function (info) {
                var programId = info.event.extendedProps.programId;
                showCustomConfirm(info.event.id, programId);
            }
        });

        calendar.render();

        function showCustomConfirm(eventId, programId) {
            Swal.fire({
                title: 'Session Options',
                text: 'What would you like to do with this session?',
                showDenyButton: true,
                showCancelButton: true,
                confirmButtonText: '<i class="fas fa-eye mr-2"></i>View Details',
                denyButtonText: '<i class="fas fa-trash mr-2"></i>Delete Session',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#3b82f6',
                denyButtonColor: '#ef4444'
            }).then((result) => {
                if (result.isConfirmed) {
                    redirectToEditEvent(programId);
                } else if (result.isDenied) {
                    deleteEvent(eventId);
                }
            });
        }

        function redirectToEditEvent(programId) {
            window.location.href = '/training/edit/' + programId;
        }

        function deleteEvent(id) {
            fetch('/calendar/delete/' + id, {
                method: 'DELETE',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => {
                    if (response.ok) {
                        console.log('Event deleted');
                        calendar.refetchEvents();
                        Swal.fire({
                            icon: 'success',
                            title: 'Deleted!',
                            text: 'Session has been deleted successfully.',
                            timer: 2000,
                            showConfirmButton: false
                        });
                    } else {
                        console.error('Failed to delete event');
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: 'Failed to delete session.'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error deleting event:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'An error occurred while deleting the session.'
                    });
                });
        }

        // Batch operations functions
        window.selectAllSessions = function () {
            const checkboxes = document.querySelectorAll('input[type="checkbox"]:not([type="submit"])');
            checkboxes.forEach(checkbox => checkbox.checked = true);
        };

        window.deselectAllSessions = function () {
            const checkboxes = document.querySelectorAll('input[type="checkbox"]:not([type="submit"])');
            checkboxes.forEach(checkbox => checkbox.checked = false);
        };
    });
</script>
{% endblock %}