{% extends 'base.html.twig' %}

{% block body %}
<div id="calendar-holder"
    class="w-10/12 my-8 p-4 rounded-lg shadow-lg dark:bg-primary light:bg-primary_light dark:text-white light:text-black">
</div>

<div
    class="dark:bg-secondary/60 light:bg-secondary_light/60 dark:text-white light:text-black p-4 rounded-lg w-5/6 mt-10 max-w-screen-lg backdrop-blur-md">
    <div class="mt-4 px-4 py-2 mb-8 rounded-lg dark:bg-primary/60 light:bg-primary_light/60">
        <h1 class="text-center font-bold text-2xl px-2 py-4">Batch delete your sessions</h1>
    </div>

    {{ form_start(form) }}
    {{ form_end(form) }}
</div>
{% endblock %}

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>

<script>

    var calendarEl = document.getElementById('calendar-holder');

    var calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        editable: true,
        headerToolbar: {
            start: 'prev,next today',
            center: 'title',
            end: 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        timeZone: 'UTC',
        events: function (fetchInfo, successCallback, failureCallback) {
            console.log('Fetching events...');
            fetch('/calendar')
                .then(response => response.json())
                .then(data => {
                    console.log('Events data:', data);
                    successCallback(data);
                })
                .catch(error => {
                    console.error('Error fetching events:', error);
                    failureCallback(error);
                });
        },
        dateClick: function (info) {
            var title = prompt('Enter Event Title:');
            if (title) {
                createEvent(title, info.dateStr);
            }
        },
        eventDrop: function (info) {
            updateEvent(info.event);
        },
        eventResize: function (info) {
            updateEvent(info.event);
        },
        eventClick: function (info) {
            if (confirm('Are you sure you want to delete this event?')) {
                deleteEvent(info.event.id);
                info.event.remove();
            }
        }
    });

    calendar.render();

    function createEvent(title, start) {
        fetch('/calendar/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                title: title,
                start: start
            })
        })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'Event created') {
                    calendar.refetchEvents();
                }
            });
    }

    function updateEvent(event) {
        fetch('/calendar/update/' + event.id, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                title: event.title,
                start: event.start.toISOString(),
                end: event.end ? event.end.toISOString() : null
            })
        })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'Event updated') {
                    calendar.refetchEvents();
                }
            });
    }

    function deleteEvent(id) {
        fetch('/calendar/delete/' + id, {
            method: 'DELETE'
        })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'Event deleted') {
                    calendar.refetchEvents();
                }
            });
    }
</script>
{% endblock %}